{"version":3,"sources":["components/Wrapper.js","components/Counter.js","components/Instructions.js","components/Header.js","components/PictureCard.js","components/Pictures.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Counter","id","wins","winsinarow","Instructions","Header","components_Counter","components_Instructions","PictureCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","makeClicked","state","clicked","lostGame","setState","shuffleCards","prevProps","prevState","snapshot","resetGame","console","log","key","onClick","src","alt","title","Component","_","require","Pictures","loseGame","count","winGame","newList","shuffle","pictureList","_this2","map","picture","components_PictureCard","App","winsInARow","alert","components_Wrapper","components_Header","components_Pictures","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a6a8ad3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Counter(props) {\r\n    return (\r\n    <div className=\"justify-content-right\">\r\n    <p id=\"wins\" className=\"lead mb-1\">Wins: {props.wins}  Wins in a Row: {props.winsinarow}</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Instructions() {\r\n    return <p className=\"lead mb-2 text-center\">See if you can click ALL tiles without clicking the same one twice!</p>\r\n}\r\n\r\nexport default Instructions;","import React from \"react\";\nimport \"./style.css\";\nimport Counter from \"./Counter\";\nimport Instructions from \"./Instructions\"\n\nfunction Header(props) {\n    return (\n        <header id=\"header\" className=\"pt-3\">\n            <div className=\"col-10 mx-auto\">\n            <h1 className=\"text-center\">Clicky Memory Game Using React</h1>\n            <Counter \n            wins={props.wins}\n            winsinarow={props.winsinarow}\n            />\n            <Instructions />\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport \"./style.css\"\n\n\n\nclass PictureCard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            clicked : false\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.resetGame !== prevProps.resetGame) {\n            console.log(\"fire\");\n            this.setState({clicked: false})\n        }\n    }\n\n    makeClicked = () => {\n        if(this.state.clicked === true) {\n            this.props.lostGame()\n        }else{\n            this.setState({ clicked : true })\n            this.props.shuffleCards();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"card bg-dark text-white\" key={this.props.id} onClick={this.makeClicked}>\n            <img className=\"card-img\" src={this.props.src} alt={this.props.title} />\n            </div>\n            )\n    }\n\n}\n\nexport default PictureCard;","import React, { Component } from \"react\";\nimport PictureCard from \"./PictureCard\";\nimport pictureList from \"./pictureList.json\";\nimport \"./style.css\";\nconst _ = require(\"lodash\");\n\nclass Pictures extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pictureList : pictureList,\n            count : 0,\n            resetGame: false,\n        }\n    }\n    resetGame = () => {\n        this.setState({resetGame: !this.state.resetGame})\n    }\n    lostGame = () => {\n        this.resetGame();\n        this.props.loseGame();\n    }\n    shuffleCards = () => {\n        this.setState({count : this.state.count + 1});\n        if(this.state.count === 15) {\n            this.resetGame();\n            this.props.winGame();\n        }else {\n            const newList = _.shuffle(this.state.pictureList);\n            this.setState({pictureList : newList});\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"allPictures\" className=\"col-8 mx-auto\">\n            {this.state.pictureList.map(picture => (\n                <PictureCard \n                id={picture.id}\n                key={picture.id}\n                src={picture.src}\n                title={picture.title}\n                shuffleCards={this.shuffleCards}\n                lostGame={this.lostGame}\n                resetGame={this.state.resetGame}\n                />\n            ))}\n            </div>\n        )\n    }\n}\n\n\nexport default Pictures;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Pictures from \"./components/Pictures\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        wins : 0,\n        winsInARow: 0,\n    }\n}\n  \n  winGame = () => {\n    this.setState({wins : this.state.wins + 1});\n    this.setState({winsInARow : this.state.winsInARow + 1});\n    alert(\"You won!!\");\n  }\n  loseGame = () => {\n    this.setState({winsInARow : 0});\n    alert(\"You lost!\");\n  }\n  \n  render() {\n    return (\n      <Wrapper>\n      <Header \n      wins={this.state.wins}\n      winsinarow={this.state.winsInARow}\n      />\n      <Pictures \n      loseGame={this.loseGame}\n      winGame={this.winGame}\n      />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}